var documenterSearchIndex = {"docs":
[{"location":"#ShiftedArrays-1","page":"Introduction","title":"ShiftedArrays","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Implementation of shifted arrays.","category":"page"},{"location":"#Shifted-Arrays-1","page":"Introduction","title":"Shifted Arrays","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"A ShiftedArray is a lazy view of an Array, shifted on some or all of his indexing dimensions by some constant values.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> v = reshape(1:16, 4, 4)\n4×4 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\n julia> s = ShiftedArray(v, (2, 0))\n 4×4 ShiftedArrays.ShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n   missing   missing    missing    missing\n   missing   missing    missing    missing\n  1         5          9         13       \n  2         6         10         14  ","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"The parent Array as well as the amount of shifting can be recovered with parent and shifts respectively.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> parent(s)\n4×4 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\njulia> shifts(s)\n(2, 0)","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"shifts returns a Tuple, where the n-th element corresponds to the shift on the n-th dimension of the parent Array.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Use copy to collect the shifted data into an Array:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> copy(s)\n4×4 Array{Union{Int64, Missing},2}:\n  missing   missing    missing    missing\n  missing   missing    missing    missing\n 1         5          9         13       \n 2         6         10         14   ","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"If you pass an integer, it will shift in the first dimension:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray(v, 1)\n4×4 ShiftedArrays.ShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n  missing   missing    missing    missing\n 1         5          9         13\n 2         6         10         14\n 3         7         11         15","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"A custom default value (other than missing) can be provided with the default keyword:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray([1.2, 3.1, 4.5], 1, default = NaN)\n3-element ShiftedArrays.ShiftedArray{Float64,Float64,1,Array{Float64,1}}:\n NaN\n   1.2\n   3.1","category":"page"},{"location":"#Out-of-bound-indexes-1","page":"Introduction","title":"Out of bound indexes","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"The bound check is performed only on the parent Array, not on the ShiftedArray, so for example:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray([1.2, 3.1, 4.5], 1, default = NaN)[-2:3]\n6-element Array{Float64,1}:\n NaN\n NaN\n NaN\n NaN\n   1.2\n   3.1","category":"page"},{"location":"#Shifting-the-data-1","page":"Introduction","title":"Shifting the data","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Using the ShiftedArray type, this package provides two operations for lazily shifting vectors: lag and lead.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> v = [1, 3, 5, 4];\n\njulia> lag(v)\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n  missing\n 1       \n 3       \n 5       \n\njulia> v .- lag(v) # compute difference from previous element without unnecessary allocations\n4-element Array{Any,1}:\n   missing\n  2       \n  2       \n -1       \n\njulia> s = lag(v, 2) # shift by more than one element\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n  missing\n  missing\n 1       \n 3","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"lead is the analogous of lag but shifts in the opposite direction:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> v = [1, 3, 5, 4];\n\njulia> lead(v)\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n 3       \n 5       \n 4       \n  missing","category":"page"},{"location":"#Shifting-the-data-circularly-1","page":"Introduction","title":"Shifting the data circularly","text":"","category":"section"},{"location":"#","page":"Introduction","title":"Introduction","text":"Julia Base provides a function circshift to shift the data circularly. However this function creates a copy of the vector, which may be unnecessary if the rotated vector is to be used only once. This package provides the CircShiftedArray type, which is a lazy view of an array shifted on some or all of his indexing dimensions by some constant values.","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"Our implementation of circshift relies on them to avoid copying:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> w = reshape(1:16, 4, 4);\n\njulia> s = ShiftedArrays.circshift(w, (1, -1))\n4×4 ShiftedArrays.CircShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n 8  12  16  4\n 5   9  13  1\n 6  10  14  2\n 7  11  15  3","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"As usual, you can copy the result to have a normal Array:","category":"page"},{"location":"#","page":"Introduction","title":"Introduction","text":"julia> copy(s)\n4×4 Array{Int64,2}:\n 8  12  16  4\n 5   9  13  1\n 6  10  14  2\n 7  11  15  3","category":"page"}]
}
