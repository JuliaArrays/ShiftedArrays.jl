var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Array-types","page":"API","title":"Array types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ShiftedArray\nShiftedVector\nCircShiftedArray\nCircShiftedVector","category":"page"},{"location":"api/#ShiftedArrays.ShiftedArray","page":"API","title":"ShiftedArrays.ShiftedArray","text":"ShiftedArray(parent::AbstractArray, shifts, default)\n\nCustom AbstractArray object to store an AbstractArray parent shifted by shifts steps (where shifts is a Tuple with one shift value per dimension of parent). For s::ShiftedArray, s[i...] == s.parent[map(-, i, s.shifts)...] if map(-, i, s.shifts) is a valid index for s.parent, and s.v[i, ...] == default otherwise. Use copy to collect the values of a ShiftedArray into a normal Array. The recommended constructor is ShiftedArray(parent, shifts; default = missing)\n\nExamples\n\njulia> v = [1, 3, 5, 4];\n\njulia> s = ShiftedArray(v, (1,))\n4-element ShiftedVector{Int64, Missing, Vector{Int64}}:\n  missing\n 1\n 3\n 5\n\njulia> v = [1, 3, 5, 4];\n\njulia> s = ShiftedArray(v, (1,))\n4-element ShiftedVector{Int64, Missing, Vector{Int64}}:\n  missing\n 1\n 3\n 5\n\njulia> copy(s)\n4-element Vector{Union{Missing, Int64}}:\n  missing\n 1\n 3\n 5\n\njulia> v = reshape(1:16, 4, 4);\n\njulia> s = ShiftedArray(v, (0, 2))\n4×4 ShiftedArray{Int64, Missing, 2, Base.ReshapedArray{Int64, 2, UnitRange{Int64}, Tuple{}}}:\n missing  missing  1  5\n missing  missing  2  6\n missing  missing  3  7\n missing  missing  4  8\n\njulia> shifts(s)\n(0, 2)\n\n\n\n\n\n","category":"type"},{"location":"api/#ShiftedArrays.ShiftedVector","page":"API","title":"ShiftedArrays.ShiftedVector","text":"ShiftedVector{T, S<:AbstractArray}\n\nShorthand for ShiftedArray{T, 1, S}.\n\n\n\n\n\n","category":"type"},{"location":"api/#ShiftedArrays.CircShiftedArray","page":"API","title":"ShiftedArrays.CircShiftedArray","text":"CircShiftedArray(parent::AbstractArray, shifts)\n\nCustom AbstractArray object to store an AbstractArray parent circularly shifted by shifts steps (where shifts is a Tuple with one shift value per dimension of parent). Note that shift is modified with a modulo operation and does not store the passed value but instead a positive number which leads to an equivalent shift. Use copy to collect the values of a CircShiftedArray into a normal Array.\n\nExamples\n\njulia> v = [1, 3, 5, 4];\n\njulia> s = CircShiftedArray(v, (1,))\n4-element CircShiftedVector{Int64, Vector{Int64}}:\n 4\n 1\n 3\n 5\n\njulia> copy(s)\n4-element Vector{Int64}:\n 4\n 1\n 3\n 5\n\n\n\n\n\n","category":"type"},{"location":"api/#ShiftedArrays.CircShiftedVector","page":"API","title":"ShiftedArrays.CircShiftedVector","text":"CircShiftedVector{T, S<:AbstractArray}\n\nShorthand for CircShiftedArray{T, 1, S}.\n\n\n\n\n\n","category":"type"},{"location":"api/#Shifting-operations","page":"API","title":"Shifting operations","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"lag\nlead\nShiftedArrays.circshift","category":"page"},{"location":"api/#ShiftedArrays.lag","page":"API","title":"ShiftedArrays.lag","text":"lag(v::AbstractArray, n = 1; default = missing)\n\nReturn a ShiftedArray object, with underlying data v. The second argument gives the amount to shift in each dimension. If it is an integer, it is assumed to refer to the first dimension. default specifies a default value when you are out of bounds.\n\nExamples\n\njulia> v = [1, 3, 5, 4];\n\njulia> lag(v)\n4-element ShiftedVector{Int64, Missing, Vector{Int64}}:\n  missing\n 1\n 3\n 5\n\njulia> w = 1:2:9\n1:2:9\n\njulia> s = lag(w, 2)\n5-element ShiftedVector{Int64, Missing, StepRange{Int64, Int64}}:\n  missing\n  missing\n 1\n 3\n 5\n\njulia> copy(s)\n5-element Vector{Union{Missing, Int64}}:\n  missing\n  missing\n 1\n 3\n 5\n\njulia> v = reshape(1:16, 4, 4);\n\njulia> s = lag(v, (0, 2))\n4×4 ShiftedArray{Int64, Missing, 2, Base.ReshapedArray{Int64, 2, UnitRange{Int64}, Tuple{}}}:\n missing  missing  1  5\n missing  missing  2  6\n missing  missing  3  7\n missing  missing  4  8\n\n\n\n\n\n","category":"function"},{"location":"api/#ShiftedArrays.lead","page":"API","title":"ShiftedArrays.lead","text":"lead(v::AbstractArray, n = 1; default = missing)\n\nReturn a ShiftedArray object, with underlying data v. The second argument gives the amount to shift negatively in each dimension. If it is an integer, it is assumed to refer to the first dimension. default specifies a default value when you are out of bounds.\n\nExamples\n\njulia> v = [1, 3, 5, 4];\n\njulia> lead(v)\n4-element ShiftedVector{Int64, Missing, Vector{Int64}}:\n 3\n 5\n 4\n  missing\n\njulia> w = 1:2:9\n1:2:9\n\njulia> s = lead(w, 2)\n5-element ShiftedVector{Int64, Missing, StepRange{Int64, Int64}}:\n 5\n 7\n 9\n  missing\n  missing\n\njulia> copy(s)\n5-element Vector{Union{Missing, Int64}}:\n 5\n 7\n 9\n  missing\n  missing\n\njulia> v = reshape(1:16, 4, 4);\n\njulia> s = lead(v, (0, 2))\n4×4 ShiftedArray{Int64, Missing, 2, Base.ReshapedArray{Int64, 2, UnitRange{Int64}, Tuple{}}}:\n  9  13  missing  missing\n 10  14  missing  missing\n 11  15  missing  missing\n 12  16  missing  missing\n\n\n\n\n\n","category":"function"},{"location":"api/#ShiftedArrays.circshift","page":"API","title":"ShiftedArrays.circshift","text":"circshift(v::AbstractArray, n)\n\nReturn a CircShiftedArray object, with underlying data v. The second argument gives the amount to circularly shift in each dimension. If it is an integer, it is assumed to refer to the first dimension.\n\nExamples\n\njulia> v = [1, 3, 5, 4];\n\njulia> ShiftedArrays.circshift(v, 1)\n4-element CircShiftedVector{Int64, Vector{Int64}}:\n 4\n 1\n 3\n 5\n\njulia> w = reshape(1:16, 4, 4);\n\njulia> ShiftedArrays.circshift(w, (1, -1))\n4×4 CircShiftedArray{Int64, 2, Base.ReshapedArray{Int64, 2, UnitRange{Int64}, Tuple{}}}:\n 8  12  16  4\n 5   9  13  1\n 6  10  14  2\n 7  11  15  3\n\n\n\n\n\n","category":"function"},{"location":"api/#FFT-shifts","page":"API","title":"FFT shifts","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ShiftedArrays.fftshift\nShiftedArrays.ifftshift","category":"page"},{"location":"api/#ShiftedArrays.fftshift","page":"API","title":"ShiftedArrays.fftshift","text":"fftshift(x [, dims])\n\nLazy version of AbstractFFTs.fftshift(x, dims). Return a CircShiftedArray where each given dimension is shifted by N÷2, where N is the size of that dimension.\n\nExamples\n\njulia> ShiftedArrays.fftshift([1 0 0 0])\n1×4 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 0  0  1  0\n\njulia> ShiftedArrays.fftshift([1 0 0; 0 0 0; 0 0 0])\n3×3 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 0  0  0\n 0  1  0\n 0  0  0\n\njulia> ShiftedArrays.fftshift([1 0 0; 0 0 0; 0 0 0], (1,))\n3×3 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 0  0  0\n 1  0  0\n 0  0  0\n\n\n\n\n\n","category":"function"},{"location":"api/#ShiftedArrays.ifftshift","page":"API","title":"ShiftedArrays.ifftshift","text":"ifftshift(x [, dims])\n\nLazy version of AbstractFFTs.ifftshift(x, dims). Return a CircShiftedArray where each given dimension is shifted by -N÷2, where N is the size of that dimension.\n\nExamples\n\njulia> ShiftedArrays.ifftshift([0 0 1 0])\n1×4 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 1  0  0  0\n\njulia> ShiftedArrays.ifftshift([0 0 0; 0 1 0; 0 0 0])\n3×3 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 1  0  0\n 0  0  0\n 0  0  0\n\njulia> ShiftedArrays.ifftshift([0 1 0; 0 0 0; 0 0 0], (2,))\n3×3 CircShiftedArray{Int64, 2, Matrix{Int64}}:\n 1  0  0\n 0  0  0\n 0  0  0\n\n\n\n\n\n","category":"function"},{"location":"api/#Accessor-functions","page":"API","title":"Accessor functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"shifts\ndefault","category":"page"},{"location":"api/#ShiftedArrays.shifts","page":"API","title":"ShiftedArrays.shifts","text":"shifts(s::ShiftedArray)\n\nReturn amount by which s is shifted compared to parent(s).\n\n\n\n\n\nshifts(s::CircShiftedArray)\n\nReturn amount by which s is shifted compared to parent(s).\n\n\n\n\n\n","category":"function"},{"location":"api/#ShiftedArrays.default","page":"API","title":"ShiftedArrays.default","text":"default(s::ShiftedArray)\n\nReturn default value.\n\n\n\n\n\n","category":"function"},{"location":"api/#Internals","page":"API","title":"Internals","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ShiftedArrays.padded_tuple\nShiftedArrays.ft_center_diff","category":"page"},{"location":"api/#ShiftedArrays.padded_tuple","page":"API","title":"ShiftedArrays.padded_tuple","text":"padded_tuple(v::AbstractVector, s)\n\nInternal function used to compute shifts. Return a Tuple with as many element as the dimensions of v. The first length(s) entries are filled with values from s, the remaining entries are 0. s should be an integer, in which case length(s) == 1, or a container of integers with keys 1:length(s).\n\nExamples\n\njulia> ShiftedArrays.padded_tuple(rand(2, 2), 3)\n(3, 0)\n\njulia> ShiftedArrays.padded_tuple(rand(2, 2), (4,))\n(4, 0)\n\njulia> ShiftedArrays.padded_tuple(rand(2, 2), (1, 5))\n(1, 5)\n\n\n\n\n\n","category":"function"},{"location":"api/#ShiftedArrays.ft_center_diff","page":"API","title":"ShiftedArrays.ft_center_diff","text":"ft_center_diff(s [, dims])\n\nReturn the shifts required to center dimensions dims at the respective Fourier centers. This function is internally used by ShiftedArrays.fftshift and ShiftedArrays.ifftshift.\n\nExamples\n\njulia> ShiftedArrays.ft_center_diff((4, 5, 6), (1, 2)) # Fourier center is at (2, 3, 0)\n(2, 2, 0)\n\njulia> ShiftedArrays.ft_center_diff((4, 5, 6), (1, 2, 3)) # Fourier center is at (2, 3, 4)\n(2, 2, 3)\n\n\n\n\n\n","category":"function"},{"location":"#ShiftedArrays","page":"Introduction","title":"ShiftedArrays","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Implementation of shifted arrays.","category":"page"},{"location":"#Shifted-Arrays","page":"Introduction","title":"Shifted Arrays","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"A ShiftedArray is a lazy view of an Array, shifted on some or all of his indexing dimensions by some constant values.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> v = reshape(1:16, 4, 4)\n4×4 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\n julia> s = ShiftedArray(v, (2, 0))\n 4×4 ShiftedArrays.ShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n   missing   missing    missing    missing\n   missing   missing    missing    missing\n  1         5          9         13       \n  2         6         10         14  ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The parent Array as well as the amount of shifting can be recovered with parent and shifts respectively.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> parent(s)\n4×4 Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}:\n 1  5   9  13\n 2  6  10  14\n 3  7  11  15\n 4  8  12  16\n\njulia> shifts(s)\n(2, 0)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"shifts returns a Tuple, where the n-th element corresponds to the shift on the n-th dimension of the parent Array.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Use copy to collect the shifted data into an Array:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> copy(s)\n4×4 Array{Union{Int64, Missing},2}:\n  missing   missing    missing    missing\n  missing   missing    missing    missing\n 1         5          9         13       \n 2         6         10         14   ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you pass an integer, it will shift in the first dimension:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray(v, 1)\n4×4 ShiftedArrays.ShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n  missing   missing    missing    missing\n 1         5          9         13\n 2         6         10         14\n 3         7         11         15","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A custom default value (other than missing) can be provided with the default keyword:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray([1.2, 3.1, 4.5], 1, default = NaN)\n3-element ShiftedArrays.ShiftedArray{Float64,Float64,1,Array{Float64,1}}:\n NaN\n   1.2\n   3.1","category":"page"},{"location":"#Out-of-bound-indexes","page":"Introduction","title":"Out of bound indexes","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The bound check is performed only on the parent Array, not on the ShiftedArray, so for example:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> ShiftedArray([1.2, 3.1, 4.5], 1, default = NaN)[-2:3]\n6-element Array{Float64,1}:\n NaN\n NaN\n NaN\n NaN\n   1.2\n   3.1","category":"page"},{"location":"#Shifting-the-data","page":"Introduction","title":"Shifting the data","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Using the ShiftedArray type, this package provides two operations for lazily shifting vectors: lag and lead.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> v = [1, 3, 5, 4];\n\njulia> lag(v)\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n  missing\n 1       \n 3       \n 5       \n\njulia> v .- lag(v) # compute difference from previous element without unnecessary allocations\n4-element Array{Any,1}:\n   missing\n  2       \n  2       \n -1       \n\njulia> s = lag(v, 2) # shift by more than one element\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n  missing\n  missing\n 1       \n 3","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"lead is the analogous of lag but shifts in the opposite direction:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> v = [1, 3, 5, 4];\n\njulia> lead(v)\n4-element ShiftedArrays.ShiftedArray{Int64,1,Array{Int64,1}}:\n 3       \n 5       \n 4       \n  missing","category":"page"},{"location":"#Shifting-the-data-circularly","page":"Introduction","title":"Shifting the data circularly","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Julia Base provides a function circshift to shift the data circularly. However this function creates a copy of the vector, which may be unnecessary if the rotated vector is to be used only once. This package provides the CircShiftedArray type, which is a lazy view of an array shifted on some or all of his indexing dimensions by some constant values.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Our implementation of circshift relies on them to avoid copying:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> w = reshape(1:16, 4, 4);\n\njulia> s = ShiftedArrays.circshift(w, (1, -1))\n4×4 ShiftedArrays.CircShiftedArray{Int64,2,Base.ReshapedArray{Int64,2,UnitRange{Int64},Tuple{}}}:\n 8  12  16  4\n 5   9  13  1\n 6  10  14  2\n 7  11  15  3","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As usual, you can copy the result to have a normal Array:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> copy(s)\n4×4 Array{Int64,2}:\n 8  12  16  4\n 5   9  13  1\n 6  10  14  2\n 7  11  15  3","category":"page"}]
}
